version '1.0-SNAPSHOT'

ext.outDir = "${projectDir}/out/"

buildscript {
	ext.kotlin_version = '1.3.0'
	ext.serialization_version = '0.8.3-rc13'
	repositories {
		mavenCentral()
		maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
		//maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
		classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
		//classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
	}
}

apply plugin: 'kotlin2js'
apply plugin: 'kotlinx-serialization'
apply plugin: 'kotlin-dce-js'
//apply plugin: 'com.moowork.node'


repositories {
	maven { url "https://kotlin.bintray.com/kotlinx" }
	mavenCentral()
}

dependencies {
	implementation "org.jetbrains.kotlin:kotlin-stdlib-js"
	testImplementation "org.jetbrains.kotlin:kotlin-test-js"
	implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
}

compileKotlin2Js {
	kotlinOptions {
		metaInfo = true
		outputFile = "$project.buildDir.path/js/${project.name}.js"
		moduleKind = "umd"
		sourceMap = true
		sourceMapEmbedSources = "always"
		freeCompilerArgs = ["-Xuse-experimental=kotlin.ExperimentalUnsignedTypes", "-version"]
	}
}

compileTestKotlin2Js { kotlinOptions.moduleKind = 'commonjs' }

clean {
	new File("${projectDir}/out").deleteDir()
}

build.doLast {
	/*configurations.compile.each { File file ->
		copy {
			includeEmptyDirs = false

			from zipTree(file.absolutePath)
			into "${projectDir}/out/js"
			include { fileTreeElement ->
				def path = fileTreeElement.path
				path.endsWith(".js") && (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
			}
		}
	}*/

	copy {
		from sourceSets.main.resources.srcDirs
		into outDir
	}

	copy {
		includeEmptyDirs = false
		from new File("build/kotlin-js-min/main")
		into "$outDir/js"
	}
}


/*task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
	from compileKotlin2Js.destinationDir

	configurations.testCompile.each {
		from zipTree(it.absolutePath).matching { include '*.js' }
	}

	into "${buildDir}/node_modules"
}

node {
	download = true
}

task installMocha(type: NpmTask) {
	args = ['install', 'mocha']
}

task runMocha(type: NodeTask, dependsOn: [compileTestKotlin2Js, populateNodeModules, installMocha]) {
	script = file('node_modules/mocha/bin/mocha')
	args = [compileTestKotlin2Js.outputFile]
}

test.dependsOn runMocha*/